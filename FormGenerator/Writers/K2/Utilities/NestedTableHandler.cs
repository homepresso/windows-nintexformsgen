using System;
using System.Collections.Generic;
using System.Linq;
using Newtonsoft.Json.Linq;

namespace K2SmartObjectGenerator.Utilities
{
    /// <summary>
    /// Handles special cases for nested RepeatingTables within repeating sections
    /// </summary>
    public static class NestedTableHandler
    {
        /// <summary>
        /// Detects if a control is a RepeatingTable within a repeating section
        /// </summary>
        public static bool IsNestedRepeatingTable(JObject control)
        {
            var controlType = control["Type"]?.Value<string>();
            var repeatingSectionInfo = control["RepeatingSectionInfo"];
            bool isRepeatingTable = controlType?.Equals("RepeatingTable", StringComparison.OrdinalIgnoreCase) == true;
            bool isInRepeatingSection = false;
            string repeatingSectionName = null;

            if (repeatingSectionInfo != null && repeatingSectionInfo.Type != Newtonsoft.Json.Linq.JTokenType.Null)
            {
                isInRepeatingSection = repeatingSectionInfo["IsInRepeatingSection"]?.Value<bool>() == true;
                repeatingSectionName = repeatingSectionInfo["RepeatingSectionName"]?.Value<string>();
            }

            bool hasRepeatingSectionName = !string.IsNullOrEmpty(repeatingSectionName);

            return isRepeatingTable && isInRepeatingSection && hasRepeatingSectionName;
        }

        /// <summary>
        /// Creates an "Add Item" toolbar button for a nested repeating table
        /// </summary>
        public static JObject CreateAddItemButtonForNestedTable(JObject originalTable)
        {
            var tableName = originalTable["Name"]?.Value<string>() ?? "UnknownTable";
            var gridPosition = originalTable["GridPosition"]?.Value<string>() ?? "1A";
            var repeatingSectionInfo = originalTable["RepeatingSectionInfo"];

            // Create toolbar button positioned right after the table
            var button = new JObject
            {
                ["Name"] = $"{tableName}_AddButton",
                ["OriginalName"] = $"{tableName}_AddButton",
                ["Type"] = "toolbarbutton",
                ["Label"] = "Add Item",
                ["Binding"] = "",
                ["GridPosition"] = IncrementGridPosition(gridPosition),
                ["CtrlId"] = Guid.NewGuid().ToString().Replace("-", "").Substring(0, 8).ToUpper(),
                ["SectionInfo"] = null,
                ["RepeatingSectionInfo"] = repeatingSectionInfo?.DeepClone(),
                ["RepeatingSectionName"] = originalTable["RepeatingSectionName"]?.Value<string>(),
                ["ParentRepeatingSectionName"] = originalTable["ParentRepeatingSectionName"]?.Value<string>(),
                ["DataOptions"] = null,
                ["DataValues"] = null,
                ["DefaultValue"] = null,
                ["AdditionalProperties"] = new JObject
                {
                    ["type"] = "toolbarbutton",
                    ["buttonType"] = "Add",
                    ["iconClass"] = "fa-plus",
                    ["imageClass"] = "add",
                    ["value"] = "Add Item",
                    ["action"] = "add",
                    ["targetTable"] = tableName,
                    ["isAutoGenerated"] = "true",
                    ["NestingDepth"] = originalTable["AdditionalProperties"]?["NestingDepth"]?.Value<string>() ?? "2"
                },
                ["SqlMapping"] = null
            };

            return button;
        }

        /// <summary>
        /// Processes controls and automatically adds "Add Item" buttons for nested tables
        /// </summary>
        public static List<JObject> ProcessControlsWithNestedTableButtons(JArray controls)
        {
            var processedControls = new List<JObject>();

            foreach (JObject control in controls)
            {
                processedControls.Add(control);

                // Check if this is a nested repeating table
                if (IsNestedRepeatingTable(control))
                {
                    var addButton = CreateAddItemButtonForNestedTable(control);
                    processedControls.Add(addButton);

                    Console.WriteLine($"    Auto-generated 'Add Item' button for nested table: {control["Name"]?.Value<string>()}");
                }
            }

            return processedControls;
        }

        /// <summary>
        /// Gets all nested tables and their auto-generated buttons from a control list
        /// </summary>
        public static Dictionary<string, NestedTableInfo> GetNestedTableInfo(JArray controls)
        {
            var nestedTables = new Dictionary<string, NestedTableInfo>();

            foreach (JObject control in controls)
            {
                if (IsNestedRepeatingTable(control))
                {
                    var tableName = control["Name"]?.Value<string>();
                    var parentSection = control["RepeatingSectionName"]?.Value<string>();
                    var grandparentSection = control["ParentRepeatingSectionName"]?.Value<string>();

                    if (!string.IsNullOrEmpty(tableName))
                    {
                        nestedTables[tableName] = new NestedTableInfo
                        {
                            TableName = tableName,
                            ParentSectionName = parentSection,
                            GrandparentSectionName = grandparentSection,
                            GridPosition = control["GridPosition"]?.Value<string>(),
                            ButtonName = $"{tableName}_AddButton",
                            NestingDepth = control["AdditionalProperties"]?["NestingDepth"]?.Value<string>() ?? "2"
                        };
                    }
                }
            }

            return nestedTables;
        }

        /// <summary>
        /// Increments grid position for button placement (simple increment)
        /// </summary>
        private static string IncrementGridPosition(string gridPosition)
        {
            if (string.IsNullOrEmpty(gridPosition))
                return "1A";

            // Extract row number and column letter
            var rowPart = new string(gridPosition.TakeWhile(char.IsDigit).ToArray());
            var columnPart = new string(gridPosition.SkipWhile(char.IsDigit).ToArray());

            if (int.TryParse(rowPart, out int row))
            {
                // Place button in column A of the next row for consistent left alignment
                return $"{row + 1}A";
            }

            return gridPosition;
        }

        /// <summary>
        /// Creates a reusable toolbar button configuration for nested tables
        /// </summary>
        public static ButtonConfiguration CreateNestedTableButtonConfig(string tableName, string parentSection)
        {
            return new ButtonConfiguration
            {
                Name = $"{tableName}_AddButton",
                Text = "Add Item",
                ButtonType = ButtonType.Add,
                Style = ButtonStyle.Primary,
                TargetTable = tableName,
                ParentSection = parentSection,
                IsAutoGenerated = true,
                IsToolbarButton = true,
                Properties = new Dictionary<string, string>
                {
                    ["IconClass"] = "fa-plus",
                    ["ButtonType"] = "Add",
                    ["Tooltip"] = $"Add new item to {tableName}",
                    ["ValidationGroup"] = parentSection
                }
            };
        }
    }

    /// <summary>
    /// Information about a nested repeating table
    /// </summary>
    public class NestedTableInfo
    {
        public string TableName { get; set; }
        public string ParentSectionName { get; set; }
        public string GrandparentSectionName { get; set; }
        public string GridPosition { get; set; }
        public string ButtonName { get; set; }
        public string NestingDepth { get; set; }
    }

    /// <summary>
    /// Configuration for buttons associated with nested tables
    /// </summary>
    public class ButtonConfiguration
    {
        public string Name { get; set; }
        public string Text { get; set; }
        public ButtonType ButtonType { get; set; }
        public ButtonStyle Style { get; set; }
        public string TargetTable { get; set; }
        public string ParentSection { get; set; }
        public bool IsAutoGenerated { get; set; }
        public bool IsToolbarButton { get; set; }
        public Dictionary<string, string> Properties { get; set; } = new Dictionary<string, string>();
    }

    /// <summary>
    /// Button types for different actions
    /// </summary>
    public enum ButtonType
    {
        Add,
        Edit,
        Delete,
        Save,
        Cancel,
        Custom
    }
}